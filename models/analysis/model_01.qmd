---
title: "Analysis of Model V01 LONG"
format: 
  html: 
    toc: true
    toc-depth: 2
    toc-location: body
    theme: darkly
    fontsize: 1em
    grid: 
      sidebar-width: 0px
      body-width: 2000px
      margin-width: 0px
---

We are analysis all variables here, checking predictions certainties, checking future predictions, checking metrics, etc. 

The model is LONG.  It matters as with yardstick

# Setting up 

```{r}
#| label: setup
#| warning: false
#| message: false

source('../functions/model_v01a.R')
source('../functions/model_v01e.R')

library(readr)
library(dplyr)
library(purrr)
library(tidyr)
library(glue)
library(gt)

the_path <- here::here()

df <- tibble(ticker = c('AAPL', 'AMD', 'AXP', 'CVX', 'FDX', 'HAL', 'SBUX', 'YUM'))

get_var_imp <- function(ticker) {
  df <- read_csv(glue(yop, ticker, '.csv'), show_col_types = FALSE) |> 
    arrange(desc(Importance)) |> 
    mutate(rank_order = row_number())
  return(df)
}

get_metrics_class <- function(ticker, model_name) {
  df <- read_csv(glue(yop, ticker, '.csv'), show_col_types = FALSE) |> 
    slice_head(n=3)
  df2 <- tibble(name = model_name, 'Precision' = mean(df$mean_preci), 
                'SoftPreci' = mean(df$mean_soft_preci), 
                'Accuracy' = mean(df$mean_soft_acc), 
                'Recall' = mean(df$mean_recall))
  return(df2)
}

get_metrics_reg <- function(ticker, model_name) {
  df <- read_csv(glue(yop, ticker, '.csv'), show_col_types = FALSE) |> 
    slice_head(n=3)
  df2 <- tibble(name = model_name, 'RMSE' = mean(df$mean))
  return(df2)
}
```

# Analyzing Variable Importance 

## Standard with xgboost and tidymodel 

### 29 days (1 1/2 months forward) 

```{r}
#| label: varimp-29d
#| eval: true
#| echo: false

num_days = '29d'

yop <- glue(the_path, '/models/model_vars_imp/xgboost_v01a_', num_days, '_')
df_VI_v01a <- df |> 
  mutate(var_imp = map(ticker, get_var_imp)) |> 
  unnest(cols = c(var_imp)) |> 
  group_by(Variable) |> 
  summarise(mean_rank = mean(rank_order), 
            mean_imp = round(mean(Importance, na.rm=TRUE), 4), 
            sd_imp = round(sd(Importance, na.rm=TRUE), 4)) |> 
  mutate(model = 'v01a', timeframe = num_days) |> 
  arrange(desc(mean_imp))

#df_VI_v01a |> gt()


df_part <- tibble(ticker = c('AAPL', 'AMD', 'AXP'))
yop <- glue(the_path, '/models/model_vars_imp/xgboost_v01e_', num_days, '_')
df_VI_v01e <- df_part |> 
  mutate(var_imp = map(ticker, get_var_imp)) |> 
  unnest(cols = c(var_imp)) |> 
  group_by(Variable) |> 
  summarise(mean_rank = mean(rank_order), 
            mean_imp = round(mean(Importance, na.rm=TRUE), 4), 
            sd_imp = round(sd(Importance, na.rm=TRUE), 4)) |> 
  mutate(model = 'v01e', timeframe = num_days) |> 
  arrange(desc(mean_imp))

#df_VI_v01e |> gt()

df_VI <- df_VI_v01a |> add_row(df_VI_v01e ) |> 
  arrange(mean_rank)
df_VI |> gt()
```


### 41 days (2 months forward) 

```{r}
#| label: varimp-41d
#| echo: false

num_days = '41d'
yop <- glue(the_path, '/models/model_vars_imp/xgboost_v01a_', num_days, '_')

df_VI_v01a <- df |> 
  mutate(var_imp = map(ticker, get_var_imp)) |> 
  unnest(cols = c(var_imp)) |> 
  group_by(Variable) |> 
  summarise(mean_rank = mean(rank_order), 
            mean_imp = mean(Importance, na.rm=TRUE), 
            sd_imp = sd(Importance, na.rm=TRUE)) |> 
  mutate(model = 'v01a', timeframe = num_days) |> 
  arrange(desc(mean_imp)) 

# Just model a, 41d
#df_VI_v01a |> gt()


yop <- glue(the_path, '/models/model_vars_imp/xgboost_v01e_', num_days, '_')
df_VI_v01e <- df_part |> 
  mutate(var_imp = map(ticker, get_var_imp)) |> 
  unnest(cols = c(var_imp)) |> 
  group_by(Variable) |> 
  summarise(mean_rank = mean(rank_order), 
            mean_imp = mean(Importance, na.rm=TRUE), 
            sd_imp = sd(Importance, na.rm=TRUE)) |> 
  mutate(model = 'v01e', timeframe = num_days) |> 
  arrange(desc(mean_imp))
# Just model e, 41d
#df_VI_v01e |> gt()

# both model together
df_VI <- df_VI_v01a |> add_row(df_VI_v01e ) |> 
  arrange(mean_rank)
df_VI |> gt()
```

# Model quality 

## Quality on resamples 

### 29 days (1 1/2 months forward) 

```{r}
#| label: metrics-29d
#| echo: false

num_days = '29d'
yop <- glue(the_path, '/models/model_metrics/xgboost_v01a_', num_days, '_')

df_ME_v01a <- df |> 
  mutate(mod_metrics = map2(ticker, 'v01a', get_metrics_class)) |> 
  unnest(cols = c(mod_metrics)) |> select(-name) |> 
  mutate(f1 = (2*Precision*Recall)/(Precision + Recall)) |> 
  mutate(model = 'v01a', timeframe = num_days) |> 
  select(ticker, timeframe, model, Precision, SoftPreci, Accuracy, Recall, f1)

# for model e
yop <- glue(the_path, '/models/model_metrics/xgboost_v01e_', num_days, '_')
df_ME_v01e <- df_part |> 
  mutate(mod_metrics = map2(ticker, 'v01e', get_metrics_reg)) |> 
  unnest(cols = c(mod_metrics)) |> select(-name) |> 
  mutate(model = 'v01e', timeframe = num_days) |> 
  select(ticker, model, RMSE)

# diplay both metrics
df_ME_29d <- left_join(df_ME_v01a, df_ME_v01e, by = join_by('ticker')) |> 
  arrange(ticker)

```

### 41 days (2 months forward) 

```{r}
#| label: metrics-41d
#| echo: false

num_days = '41d'

yop <- glue(the_path, '/models/model_metrics/xgboost_v01a_', num_days, '_')
df_ME_v01a <- df |> 
  mutate(mod_metrics = map2(ticker, 'v01a', get_metrics_class)) |> 
  unnest(cols = c(mod_metrics)) |> select(-name) |> 
  mutate(f1 = (2*Precision*Recall)/(Precision + Recall)) |> 
  mutate(model = 'v01a', timeframe = num_days) |> 
  select(ticker, timeframe, model, Precision, SoftPreci, Accuracy, Recall, f1)

# for model e
yop <- glue(the_path, '/models/model_metrics/xgboost_v01e_', num_days, '_')
df_ME_v01e <- df |> 
  mutate(mod_metrics = map2(ticker, 'v01e', get_metrics_reg)) |> 
  unnest(cols = c(mod_metrics)) |> select(-name) |> 
  mutate(model = 'v01e', timeframe = num_days) |> 
  select(ticker, model, RMSE)

# diplay both metrics
df_ME_41d <- left_join(df_ME_v01a, df_ME_v01e, by = join_by('ticker')) |> 
  arrange(ticker)
```

```{r}
df_ME <- df_ME_29d |> add_row(df_ME_41d) |> 
  arrange(ticker)
df_ME |> gt()
```


## Quality on test set 

last year of data which has been unseen


```{r}
#| label: prediction_testset_41d
#| warning: false
#| message: false
#| include: false
#| echo: true
#| eval: true

library(broom)
library(tidyr)
library(parsnip)
library(yardstick)

source('../functions/model_v01a.R')

the_path <- here::here()

num_days <- '41d'
yop <- glue(the_path, '/models/model_raw/xgboost_v01a_', num_days, '_')


get_testing_metrics <- function(ticker) { 
  model_fit <- read_rds(glue(yop, ticker, '.rda'))
  df <- model01a(ticker, num_days) |> filter(date > '2023-06-30')
  df_test_class <- predict(model_fit, new_data = df)
  df_test_prob <- predict(model_fit, new_data = df, type = 'prob')
  yo <- bind_cols(df |> select(date, forw_ret, ord_class), df_test_class, df_test_prob)
  TP = yo |> filter(.pred_class == 3 & ord_class == 3)
  FP = yo |> filter(.pred_class == 3 & ord_class != 3)
  FN = yo |> filter(.pred_class != 3 & ord_class == 3)
  precision_t = nrow(TP) / (nrow(TP) + nrow(FP))
  recall_t = nrow(TP) / (nrow(TP) + nrow(FN))
  f1_t = round((2*precision_t*recall_t)/(precision_t + recall_t), 4)
  df_metrics = tibble(precision_t = precision_t, recall_t = recall_t, f1_t = f1_t)
  return(df_metrics)
}

df <- tibble(ticker = c('AAPL', 'AMD', 'AXP', 'CVX', 'FDX', 'HAL', 'SBUX', 'YUM', 'RIO')) 

yo <- df |> 
  mutate(test_metrics = map(ticker, get_testing_metrics)) |> 
  unnest(test_metrics)
```

```{r}
yo |> gt()
```

