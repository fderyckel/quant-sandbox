---
title: "Analysis of Model V01"
format: 
  html: 
    toc: true
    toc-depth: 2
    toc-location: body
    theme: darkly
    fontsize: 1.1em
    grid: 
      sidebar-width: 0px
      body-width: 2000px
      margin-width: 0px
---

We are analysis all variables here, checking predictions certainties, checking future predictions, checking metrics, etc. 

# Setting up 

```{r}
#| label: setup
#| warning: false
#| message: false

source('../functions/model_v01a.R')
source('../functions/model_v01e.R')

library(readr)
library(dplyr)
library(purrr)
library(tidyr)
library(glue)
library(gt)

the_path <- here::here()

df <- tibble(ticker = c('AAPL', 'AMD', 'AXP', 'CVX', 'FDX', 'HAL', 'SBUX', 'YUM'))

get_var_imp <- function(ticker) {
  df <- read_csv(glue(yop, ticker, '.csv'), show_col_types = FALSE) |> 
    arrange(desc(Importance)) |> 
    mutate(rank_order = row_number())
  return(df)
}

get_metrics_class <- function(ticker, model_name) {
  df <- read_csv(glue(yop, ticker, '.csv'), show_col_types = FALSE) |> 
    slice_head(n=3)
  df2 <- tibble(name = model_name, 'Precision' = mean(df$mean_preci), 
                'SoftPreci' = mean(df$mean_soft_preci), 
                'Accuracy' = mean(df$mean_soft_acc), 
                'Recall' = mean(df$mean_recall))
  return(df2)
}

get_metrics_reg <- function(ticker, model_name) {
  df <- read_csv(glue(yop, ticker, '.csv'), show_col_types = FALSE) |> 
    slice_head(n=3)
  df2 <- tibble(name = model_name, 'RMSE' = mean(df$mean))
  return(df2)
}
```

# Analyzing Variable Importance 

## Standard with xgboost and tidymodel 

### 29 days (1 1/2 months forward) 

```{r}
#| label: varimp-29d
#| eval: true
#| echo: false

num_days = '29d'

yop <- glue(the_path, '/models/model_vars_imp/xgboost_v01a_', num_days, '_')
df_VI_v01a <- df |> 
  mutate(var_imp = map(ticker, get_var_imp)) |> 
  unnest(cols = c(var_imp)) |> 
  group_by(Variable) |> 
  summarise(mean_rank = mean(rank_order), 
            mean_imp = round(mean(Importance, na.rm=TRUE), 4), 
            sd_imp = round(sd(Importance, na.rm=TRUE), 4)) |> 
  mutate(model = 'v01a', timeframe = num_days) |> 
  arrange(desc(mean_imp))

df_VI_v01a |> gt()


df <- tibble(ticker = c('AAPL', 'AMD', 'AXP'))
yop <- glue(the_path, '/models/model_vars_imp/xgboost_v01e_', num_days, '_')
df_VI_v01e <- df |> 
  mutate(var_imp = map(ticker, get_var_imp)) |> 
  unnest(cols = c(var_imp)) |> 
  group_by(Variable) |> 
  summarise(mean_rank = mean(rank_order), 
            mean_imp = round(mean(Importance, na.rm=TRUE), 4), 
            sd_imp = round(sd(Importance, na.rm=TRUE), 4)) |> 
  mutate(model = 'v01e', timeframe = num_days) |> 
  arrange(desc(mean_imp))

df_VI_v01e |> gt()

df_VI <- df_VI_v01a |> add_row(df_VI_v01e ) |> 
  arrange(mean_rank)
df_VI |> gt()
```


### 41 days (2 months forward) 

```{r}
#| label: varimp-41d
#| echo: false

num_days = '41d'
yop <- glue(the_path, '/models/model_vars_imp/xgboost_v01a_', num_days, '_')

df <- tibble(ticker = c('AAPL', 'AMD', 'AXP', 'CVX', 'FDX', 'HAL', 'SBUX', 'YUM'))

df_VI_v01a <- df |> 
  mutate(var_imp = map(ticker, get_var_imp)) |> 
  unnest(cols = c(var_imp)) |> 
  group_by(Variable) |> 
  summarise(mean_rank = mean(rank_order), 
            mean_imp = mean(Importance, na.rm=TRUE), 
            sd_imp = sd(Importance, na.rm=TRUE)) |> 
  mutate(model = 'v01a', timeframe = num_days) |> 
  arrange(desc(mean_imp)) 

# Just model a, 41d
df_VI_v01a |> gt()


yop <- glue(the_path, '/models/model_vars_imp/xgboost_v01e_', num_days, '_')

df_VI_v01e <- df |> 
  mutate(var_imp = map(ticker, get_var_imp)) |> 
  unnest(cols = c(var_imp)) |> 
  group_by(Variable) |> 
  summarise(mean_rank = mean(rank_order), 
            mean_imp = mean(Importance, na.rm=TRUE), 
            sd_imp = sd(Importance, na.rm=TRUE)) |> 
  mutate(model = 'v01e', timeframe = num_days) |> 
  arrange(desc(mean_imp))
# Just model e, 41d
df_VI_v01e |> gt()

# both model together
df_VI <- df_VI_v01a |> add_row(df_VI_v01e ) |> 
  arrange(mean_rank)
df_VI |> gt()
```

# Model quality 

## Quality on resamples 

### 29 days (1 1/2 months forward) 

```{r}
#| label: metrics-29d
#| echo: false

num_days = '29d'
yop <- glue(the_path, '/models/model_metrics/xgboost_v01a_', num_days, '_')

df <- tibble(ticker = c('AAPL', 'AMD', 'AXP', 'CVX', 'FDX', 'HAL', 'SBUX', 'YUM'))

df_ME_v01a <- df |> 
  mutate(mod_metrics = map2(ticker, 'v01a', get_metrics_class)) |> 
  unnest(cols = c(mod_metrics)) |> select(-name) |> 
  mutate(model = 'v01a', timeframe = num_days) 

# for model e
df <- tibble(ticker = c('AAPL', 'AMD', 'AXP'))
yop <- glue(the_path, '/models/model_metrics/xgboost_v01e_', num_days, '_')
df_ME_v01e <- df |> 
  mutate(mod_metrics = map2(ticker, 'v01e', get_metrics_reg)) |> 
  unnest(cols = c(mod_metrics)) |> select(-name) |> 
  mutate(model = 'v01e', timeframe = num_days) 

# diplay both metrics
#df_ME <- df_ME_v01a |> add_row(df_ME_v01e ) |> 
#  mutate(f1 = (2*Precision*Recall)/(Precision + Recall)) |> 
#  arrange(ticker, model)
#df_ME |> gt()

```

### 41 days (2 months forward) 

```{r}
#| label: metrics-41d
#| echo: false

num_days = '41d'
df <- tibble(ticker = c('AAPL', 'AMD', 'AXP', 'CVX', 'FDX', 'HAL', 'SBUX', 'YUM'))

yop <- glue(the_path, '/models/model_metrics/xgboost_v01a_', num_days, '_')
df_ME_v01a <- df |> 
  mutate(mod_metrics = map2(ticker, 'v01a', get_metrics_class)) |> 
  unnest(cols = c(mod_metrics)) |> select(-name) |> 
  mutate(model = 'v01a', timeframe = num_days) 

# for model e
yop <- glue(the_path, '/models/model_metrics/xgboost_v01e_', num_days, '_')
df_ME_v01e <- df |> 
  mutate(mod_metrics = map2(ticker, 'v01e', get_metrics_class)) |> 
  unnest(cols = c(mod_metrics)) |> select(-name) |> 
  mutate(model = 'v01e', timeframe = num_days) 

# diplay both metrics
df_ME <- df_ME_v01a |> add_row(df_ME_v01e ) |> 
  mutate(f1 = (2*Precision*Recall)/(Precision + Recall)) |> 
  arrange(ticker, model)
df_ME |> gt()
```


## Quality on test set (last year of data which has been unseen)

# Making prediction 

```{r}
#| label: makingPrediction
#| warning: false
#| message: false
#| eval: true

library(broom)
library(tidyr)
library(parsnip)
library(yardstick)

ticker <- 'HAL'
num_days <- '41d'

yop <- glue(the_path, '/models/model_raw/xgboost_v01a_', num_days, '_')
model_v01a <- read_rds(glue(yop, ticker, '.rda'))
df_v01a <- augment(model_v01a, 
                   model01a(ticker, num_days) |> filter(date > '2023-06-30')) |> 
  select(date, close, forw_ret, ord_class, v01a_class = .pred_class, 
         v01a_class1 = .pred_1, v01a_class2 = .pred_2, v01a_class3 = .pred_3)

yop <- glue(the_path, '/models/model_raw/xgboost_v01e_', num_days, '_')
model_v01e <- read_rds(glue(yop, ticker, '.rda'))
df_v01e <- augment(model_v01e, 
                   model01e(ticker, num_days) |> filter(date > '2023-06-30')) |> 
  select(date, close, forw_ret, v01e_class = ord_class, 
         v01e_pred = .pred)

yo <- left_join(df_v01a, df_v01e) |> arrange(date) 

yo |> drop_na() |> slice_tail(n = 10) |> gt()

yo |> slice_tail(n = 10) |> gt()


conf_mat(yo |> drop_na(), truth = ord_class, estimate = v01a_class)
summary(conf_mat(yo |> drop_na(), truth = ord_class, estimate = v01a_class)) |> gt()

#f_meas(yo, truth = ord_class, estimate = .pred_class)
```

