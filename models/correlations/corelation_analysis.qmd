---
title: "Analysis of Variable importance, correlation and metrics"
format: html
---

```{r}
#| label: setup
#| warning: false
#| message: false
#| echo: false

library(readr)
library(dplyr)
library(purrr)
library(tidyr)
library(glue)
library(gt)

the_path <- here::here()

get_var_imp <- function(ticker) {
  df <- read_csv(glue(yop, ticker, '.csv'), show_col_types = FALSE) |> 
    arrange(desc(Importance)) |> 
    mutate(rank_order = row_number())
  return(df)
}

get_metrics <- function(ticker, model_name) {
  df <- read_csv(glue(yop, ticker, '.csv'), show_col_types = FALSE) |> 
    slice_head(n=3)
  df2 <- tibble(name = model_name, 'Precision' = mean(df$mean_preci), 
                'SoftPreci' = mean(df$mean_soft_preci), 
                'Accuracy' = mean(df$mean_acc), 
                'Recall' = mean(df$mean_recall))
  return(df2)
}

get_metrics_V2 <- function(ticker, model_name) {
  df <- read_csv(glue(yop, ticker, '.csv'), show_col_types = FALSE) |> 
    slice_head(n=3)
  df2 <- tibble(name = model_name, 'Precision' = mean(df$mean_preci), 
                'SoftPreci' = mean(df$mean_soft_preci), 
                'Accuracy' = mean(df$mean_soft_acc), 
                'Recall' = mean(df$mean_recall))
  return(df2)
}
```



# model V1b 

Thirdile 31 days in the future

## Correlations 

```{r}
#| label: modelv1bCorr
#| message: false
#| echo: false

read_csv('model_v1b.csv') |> 
  group_by(x, y) |> 
  summarize(avg_corr = mean(r)) |> 
  as_tibble() |> arrange(desc(abs(avg_corr))) |> 
  gt()
```

## Var Imp 

```{r}
#| label: modelv1bVarImp
#| message: false
#| echo: false

yop <- glue(the_path, '/models/model_vars_imp/xgboost_modelv1b_thirdile_')

df_VI_V1b <- tibble(ticker = c('AMD', 'AXP', 'FDX', 'HAL', 'JPM')) |> 
  mutate(var_imp = map(ticker, get_var_imp)) |> 
  unnest(cols = c(var_imp)) |> 
  group_by(Variable) |> 
  summarise(mean_rank = mean(rank_order), 
            mean_imp = mean(Importance, na.rm=TRUE), 
            sd_imp = sd(Importance, na.rm=TRUE)) |> 
  arrange(desc(mean_imp))

df_VI_V1b |> gt()
```


## Metrics 

```{r}
#| label: modelv1bMetrics
#| message: false
#| echo: false

yop <- glue(the_path, '/models/model_metrics/xgboost_modelv1b_thirdile_')
model_name <- 'Model V1b'

df_V1b <- tibble(ticker = c('AMD', 'AXP', 'FDX', 'HAL', 'JPM', 'SBUX')) |> 
  mutate(metrics = map2(ticker, model_name, get_metrics)) |> 
  unnest(cols = c(metrics))

#df_V1b |> gt()
``` 


# model V8_2 Explo 

## Correlations 

```{r}
#| label: modelv82Corr
#| message: false
#| echo: false

read_csv('model_v8_2.csv') |> 
  group_by(x, y) |> 
  summarize(avg_corr = mean(r)) |> 
  as_tibble() |> arrange(desc(abs(avg_corr))) |> 
  gt()
```

## Var Imp 

```{r}
#| label: modelv82VarImp
#| message: false
#| echo: false

yop <- glue(the_path, '/models/model_vars_imp/xgboost_v8_2_7wClass3ile_')

df_VI_V82 <- tibble(ticker = c('AA', 'AAPL', 'AMD', 'CVX', 'FDX', 'JPM')) |> 
  mutate(var_imp = map(ticker, get_var_imp)) |> 
  unnest(cols = c(var_imp)) |> 
  group_by(Variable) |> 
  summarise(mean_rank = mean(rank_order), 
            mean_imp = mean(Importance, na.rm=TRUE), 
            sd_imp = sd(Importance, na.rm=TRUE)) |> 
  arrange(desc(mean_imp))

df_VI_V82 |> gt()
```

## Metrics 

```{r}
#| label: modelv82Metrics
#| message: false
#| echo: false

yop <- glue(the_path, '/models/model_metrics/xgboost_v8_2_7wClass3ile_')
model_name <- 'Model V8_2'

df_V82 <- tibble(ticker = c('AA', 'AAPL', 'AMD', 'CVX', 'FDX', 'JPM')) |> 
  mutate(metrics = map2(ticker, model_name, get_metrics_V2)) |> 
  unnest(cols = c(metrics))

#df_V82 |> gt()
```



# model V8_3 Explo 

## Correlations 

```{r}
#| label: modelv83Corr
#| message: false
#| echo: false
#| eval: false

read_csv('model_v8_3.csv') |> 
  group_by(x, y) |> 
  summarize(avg_corr = mean(r)) |> 
  as_tibble() |> arrange(desc(abs(avg_corr))) |> 
  gt()
```

## Var Imp 

```{r}
#| label: modelv83VarImp
#| message: false
#| echo: false

yop <- glue(the_path, '/models/model_vars_imp/xgboost_v8_3_7wClass3ile_')
tickers <- c('AA', 'AAPL', 'AMD', 'CVX', 'HAL', 'FDX', 'JPM')

df_VI_V83 <- tibble(ticker = tickers) |> 
  mutate(var_imp = map(ticker, get_var_imp)) |> 
  unnest(cols = c(var_imp)) |> 
  group_by(Variable) |> 
  summarise(mean_rank = mean(rank_order), 
            mean_imp = mean(Importance, na.rm=TRUE), 
            sd_imp = sd(Importance, na.rm=TRUE)) |> 
  arrange(desc(mean_imp))

#df_VI_V83 |> gt()
```

## Metrics 

```{r}
#| label: modelv83Metrics
#| message: false
#| echo: false

yop <- glue(the_path, '/models/model_metrics/xgboost_v8_3_7wClass3ile_')
model_name <- 'Model V8_3'

df_V83 <- tibble(ticker = tickers) |> 
  mutate(metrics = map2(ticker, model_name, get_metrics_V2)) |> 
  unnest(cols = c(metrics))

df_V83 |> gt()
```


# Variables importance 

```{r}
df_VI_V1b <- df_VI_V1b |> mutate(model = 'V1b')
df_VI_V82 <- df_VI_V82 |> mutate(model = 'V8_2')
df_VI_V83 <- df_VI_V83 |> mutate(model = 'V8_3')

df <- df_VI_V1b |> add_row(df_VI_V82) |> 
  add_row(df_VI_V83) |> 
  arrange(mean_rank, Variable)

df |> gt()
```


# Metrics 

* Precision: if I predict a 3, is it indeed a 3? Higher is better. 
* Soft Precision: if I predict a 3, is it indeed a 3? Gave 0.5 if it was a 2
* Accuracy: Are the predictions matching (3 ==>3, 2 ==> 2, 1 ==> 1)
* Recall: if there is a 3 in the dataset, do I catch it. 


```{r}
df <- df_V1b |> add_row(df_V82) |> add_row(df_V83) |> 
  arrange(ticker, name)

df |> gt()
```


