---
title: "Summary portfolio V3"
author: "FdR"
date: "`r Sys.Date()`"
date-format: full
format: 
  html: 
    toc: true
    number_section: true
    fig-width: 12
    fig-height: 8
---

```{r}
#| label: setup
#| warning: false
#| message: false
#| echo: false

library(dplyr)
library(readr)
library(purrr)
library(lubridate)
library(tidyr)
library(glue)
library(timetk)
library(gt)

the_path <- here::here()

# functions to download prices using the fmpr api
get_fmpr_prices <- function(ticker, from = "2001-01-02", to = today()) { 
  base_url <- "https://financialmodelingprep.com/api/v3/"
  endpoint <- 'historical-price-full/'
  headers = c(`Upgrade-Insecure-Requests` = '1')
  params = list(`datatype` = 'json', `from` = from, `to` = to, 
                `apikey` = "085072758657f1c6e9f7d0acb8014d5b")
  res <- httr::GET(url = glue(base_url, endpoint, ticker), 
                   httr::add_headers(.headers = headers), query = params)
  return_json <- httr::content(res, as = "text")
  d <- jsonlite::fromJSON(return_json)
  d <- tibble::as_tibble(d$historical)
  write_csv(d, glue({the_path}, "/data_stock_fmpr/", {ticker}, ".csv"))
}


############### Function to get returns and sd of returns ##############
# to be used in the get_returns function
roll_sd_3Y = slidify(.f = sd, .period = 756, .align = 'right')
roll_mean_3Y = slidify(.f = mean, .period = 756, .align = 'right')

get_returns <- function(ticker) { 
  df <- read_csv(glue(the_path, '/data_stock_fmpr/', ticker, '.csv', 
                      show_col_types = FALSE)) |> 
    select(date, adjusted = adjClose) |> 
    arrange(date) |> 
    mutate(ret_1d = log(adjusted / lag(adjusted, n = 1)), 
           ret_1W = log(adjusted / lag(adjusted, n = 5)), 
           ret_1M = log(adjusted / lag(adjusted, n = 21)), 
           ret_6M = log(adjusted / lag(adjusted, n = 126)), 
           ret_1Y = log(adjusted / lag(adjusted, n = 252)), 
           roll3Y_mean_ret1d = roll_mean_3Y(ret_1d), 
           roll3Y_sd_ret1d = roll_sd_3Y(ret_1d), 
           roll3Y_mean_ret1W = roll_mean_3Y(ret_1W), 
           roll3Y_sd_ret1W = roll_sd_3Y(ret_1W), 
           roll3Y_mean_ret1M = roll_mean_3Y(ret_1M), 
           roll3Y_sd_ret1M = roll_sd_3Y(ret_1M), 
           roll3Y_mean_ret6M = roll_mean_3Y(ret_6M), 
           roll3Y_sd_ret6M = roll_sd_3Y(ret_6M),     
           roll3Y_mean_ret1Y = roll_mean_3Y(ret_1Y), 
           roll3Y_sd_ret1Y = roll_sd_3Y(ret_1Y),            
           sd_abov_ret1d = (ret_1d - roll3Y_mean_ret1d) / roll3Y_sd_ret1d, 
           sd_abov_ret1W = (ret_1W - roll3Y_mean_ret1W) / roll3Y_sd_ret1W, 
           sd_abov_ret1M = (ret_1M - roll3Y_mean_ret1M) / roll3Y_sd_ret1M, 
           sd_abov_ret6M = (ret_6M - roll3Y_mean_ret6M) / roll3Y_sd_ret6M, 
           sd_abov_ret1Y = (ret_1Y - roll3Y_mean_ret1Y) / roll3Y_sd_ret1Y) |> 
    slice_tail(n = 1) 
  return(df)
  
}

```

```{r}
#| eval: true
#| echo: false

markets <- c('SPY', 'DIA', 'QQQ')
sectors <- c('XLC', 'XLY', 'XLP', 'XLE', 'XLF', 'XLV', 'XLI', 'XLB', 'XLRE', 'XLK', 'XLU')
tickers <- c(markets, sectors)

for (i in 1:length(tickers)) { 
  tryCatch({ 
    get_fmpr_prices(tickers[i])
    }, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
```


# How did the market perform ? 

Return of main indices and sectors over the week / month / year.  
The standard deviation are calculated on a 3 years rolling basis. 

```{r}
#| label: marketReturns
#| echo: false
#| message: false
#| warning: false

df <- tibble(ticker = markets) |> 
  mutate(returns = map(ticker, get_returns)) |> 
  unnest(cols = c(returns)) 

df |> select(ticker, date, adjusted, starts_with('ret_'), starts_with('sd_abov_')) |> 
  gt() |> 
  tab_header(title = 'Returns of Portfolio Assets') |> 
  fmt_percent(columns = starts_with('ret_'), decimals = 1) |> 
  fmt_number(columns = 'adjusted', decimals = 2) |>
  fmt_number(columns = starts_with('sd_abov_'), decimals = 2) |> 
  tab_spanner(label = 'Daily', columns = c(ret_1d, sd_abov_ret1d)) |> 
  tab_spanner(label = 'Weekly', columns = c(ret_1W, sd_abov_ret1W)) |> 
  tab_spanner(label = 'Monthly', columns = c(ret_1M, sd_abov_ret1M)) |>
  tab_spanner(label = '6-Monthly', columns = c(ret_6M, sd_abov_ret6M)) |> 
  tab_spanner(label = 'Yearly', columns = c(ret_1Y, sd_abov_ret1Y)) |> 
  cols_label(ret_1d = 'ret.', sd_abov_ret1d = 'sd', 
             ret_1W = 'ret.', sd_abov_ret1W = 'sd', 
             ret_1M = 'ret.', sd_abov_ret1M = 'sd', 
             ret_6M = 'ret.', sd_abov_ret6M = 'sd', 
             ret_1Y = 'ret.', sd_abov_ret1Y = 'sd') |> 
  opt_stylize(style = 1)
```

```{r}
#| label: sectorReturns
#| echo: false
#| message: false
#| warning: false

df <- tibble(ticker = sectors) |> 
  mutate(returns = map(ticker, get_returns)) |> 
  unnest(cols = c(returns)) 

yo <- df |> filter(ticker == 'XLP' & date > '2006-01-01') |> 
 select(date, ret_1Y, roll3Y_mean_ret1Y, roll3Y_sd_ret1Y, sd_abov_ret1Y)

df |> select(ticker, date, adjusted, starts_with('ret_'), starts_with('sd_abov_')) |> 
  gt() |> 
  tab_header(title = 'Returns of S&P Sectors') |> 
  fmt_percent(columns = starts_with('ret_'), decimals = 1) |> 
  fmt_number(columns = starts_with('sd_abov_'), decimals = 2) |> 
  tab_spanner(label = 'Daily', columns = c(ret_1d, sd_abov_ret1d)) |> 
  tab_spanner(label = 'Weekly', columns = c(ret_1W, sd_abov_ret1W)) |> 
  tab_spanner(label = 'Monthly', columns = c(ret_1M, sd_abov_ret1M)) |>
  tab_spanner(label = '6-Monthly', columns = c(ret_6M, sd_abov_ret6M)) |> 
  tab_spanner(label = 'Yearly', columns = c(ret_1Y, sd_abov_ret1Y)) |> 
  cols_label(ret_1d = 'ret.', sd_abov_ret1d = 'sd', 
             ret_1W = 'ret.', sd_abov_ret1W = 'sd', 
             ret_1M = 'ret.', sd_abov_ret1M = 'sd', 
             ret_6M = 'ret.', sd_abov_ret6M = 'sd', 
             ret_1Y = 'ret.', sd_abov_ret1Y = 'sd') |> 
  opt_stylize(style = 1) 
```


# My portofolio 

```{r}
#| label: myPositions
#| echo: false

# My positions 
df <- tibble(ticker = c('CBOE', 'NEE', 'OXY', 'EWZ', 'EWJ', 'EEM', 'EWH', 'GDXJ', 'CGC', 'GROY', 'LUC.TO'))

tickers = c('EWH', 'GDXJ', 'CGC', 'EEM', 'EWJ', 'CBOE', 'NEE') 
etf1 =    c('EEM', 'UUP', 'SPY', 'UUP', 'SPY', 'SPY', 'SPY')

stock_tickers <- c(tickers, 'UUP')

for (i in 1:length(df)) { 
  tryCatch({ 
    get_fmpr_prices(df$ticker[i])
    }, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}

df <- df |> 
  mutate(returns = map(ticker, possibly(.f = get_returns, otherwise = NULL))) |> 
  unnest(cols = c(returns)) 

yo <- df |> filter(ticker == 'XLP' & date > '2006-01-01') |> 
 select(date, ret_1Y, roll3Y_mean_ret1Y, roll3Y_sd_ret1Y, sd_abov_ret1Y)

df |> select(ticker, date, adjusted, starts_with('ret_'), starts_with('sd_abov_')) |> 
  gt() |> 
  tab_header(title = 'Returns of S&P Sectors') |> 
  fmt_percent(columns = starts_with('ret_'), decimals = 1) |> 
  fmt_number(columns = starts_with('sd_abov_'), decimals = 2) |> 
  tab_spanner(label = 'Daily', columns = c(ret_1d, sd_abov_ret1d)) |> 
  tab_spanner(label = 'Weekly', columns = c(ret_1W, sd_abov_ret1W)) |> 
  tab_spanner(label = 'Monthly', columns = c(ret_1M, sd_abov_ret1M)) |>
  tab_spanner(label = '6-Monthly', columns = c(ret_6M, sd_abov_ret6M)) |> 
  tab_spanner(label = 'Yearly', columns = c(ret_1Y, sd_abov_ret1Y)) |> 
  cols_label(ret_1d = 'ret.', sd_abov_ret1d = 'sd', 
             ret_1W = 'ret.', sd_abov_ret1W = 'sd', 
             ret_1M = 'ret.', sd_abov_ret1M = 'sd', 
             ret_6M = 'ret.', sd_abov_ret6M = 'sd', 
             ret_1Y = 'ret.', sd_abov_ret1Y = 'sd') |> 
  opt_stylize(style = 1) 
```


##  Portfolio Charts  

```{r}
#| label: portfolioGetPrices
#| echo: false
#| warning: false
#| message: false
#| eval: true


for (i in 1:length(stock_tickers)) { 
  tryCatch({ 
    get_fmpr_prices(stock_tickers[i])
    }, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
```


```{r}
#| label: portfolioCharts
#| echo: false
#| warning: false

source('../functions/chart_plotting_v1.R')

conform_data <- function(ticker, interval = 'Daily', provider = 'fmpr'){
    df <- read_csv(paste0(the_path, "/data_stock_fmpr/", ticker, ".csv"), 
                   show_col_types = FALSE) |>  
      select(index = date, open, high, low, close, adjusted=adjClose, volume) |>  
      arrange(index) 
    return(df)
}

df <- tibble(ticker = tickers, etf1 = etf1)

for (i in 1:nrow(df)){ 
  #print(df$ticker[i])
  yo <- tibble(ticker = tickers[i], etf1 = etf1[i]#, etf2 = etf2[i]
               ) %>% 
    mutate(raw_df = map(ticker, function(.x) conform_data(.x)), 
           ext_df = map(raw_df, create_plot_fin_df))
  create_candlestick_chart(yo$ext_df[[1]], yo$ticker, 
                           start_date = today() - 365, 
                           end_date = today())
  create_vol_candlestick_chart(yo$ext_df[[1]], 
                               yo$ticker, 
                               start_date = today() - 365, 
                               end_date = today())
  create_rel_candlestick_chart(df$ticker[i], 
                               df$etf1[i], 
                               #df$etf2[i], 
                               df$ticker[i], 
                               start_date = today() - 365, 
                               end_date = today())  
  }

```

Click [here](../charts/charts_portfolio.pdf) to see the charts. 

# Momentum


# volatility 

