---
title: "Volatility"
format: html
---

Screen for tickers that have higher than usual volatility.  
Screen for tickers that have higher than usual volatility but not as high as it was a week ago. 

Question: What volatility are we talking about: 

* daily returns (close to close).  Then rolling sd of that over 21 days and over 251 days
* max to min within a 5 day periods?  within a 11 days periods, within a 19 days periods and then doing a rolling sd of that. 
* returns over a n-trading periods (11 days, 19 days, 31 days, 41 days)? 

how do you calculate your volatility? 

Volatility for forecasting power?  Are we taking 1 1/2 months, 5 months, 7 months, 11 months

# Kurtosis 

I am taking this from this website: https://eranraviv.com/stock-market-kurtosis-over-time/

We can use the Kurtosis as a proxy for extreme events, high Kurtosis in a certain month means that the return distribution for that month was such that most observations were in the center, and some were in the tails, the higher the kurtosis, the fatter the tail. Here I do not differentiate between positive and negative shocks.

```{r}
#| label: setup
#| warning: false
#| message: false

library(readr)
library(dplyr)
library(timetk)
library(lubridate)
```

Idea is to calculate the trailing monthly kurtosis (same with 6 months)

```{r}
#| label: setup-functions
#| warning: false
#| message: false

corr_roll_21d = slidify(.f = ~cor(.x, .y), .align = 'right', .period = 21)
corr_roll_126d = slidify(.f = ~cor(.x, .y), .align = 'right', .period = 126)
kurt_roll_21d = slidify(.f = moments::kurtosis, .align = 'right', .period = 21)
kurt_roll_63d = slidify(.f = moments::kurtosis, .align = 'right', .period = 63)
kurt_roll_126d = slidify(.f = moments::kurtosis, .align = 'right', .period = 126)
kurt_roll_252d = slidify(.f = moments::kurtosis, .align = 'right', .period = 252)

df <- read_csv('../data_stock_fmpr/GDX.csv') |> 
  arrange(date) |> 
  select(date, open, high, low, adjusted = adjClose, volume) |> 
  mutate(ret_1d = (adjusted / lag(adjusted, n=1)) - 1, 
         for_ret_35d = (lead(adjusted, n=105) / adjusted) - 1, 
         kurt_21d = kurt_roll_21d(ret_1d), 
         kurt_63d = kurt_roll_63d(ret_1d), 
         kurt_126d = kurt_roll_126d(ret_1d), 
         kurt_252d = kurt_roll_252d(ret_1d), 
         cor_ret35d_kurt126d_21d = corr_roll_21d(for_ret_35d, kurt_126d), 
         cor_ret35d_kurt126d_126d = corr_roll_126d(for_ret_35d, kurt_126d)) 

library(ggplot2)
yo <- df |> filter(date > today() - 504)
ggplot(df |> filter(date > today() - 504), aes(x = date, y = kurt_21d)) + 
  geom_line() + 
  scale_x_date(date_break = "2 months", date_labels = "%b %y")

ggplot(df |> filter(date > today() - 504), aes(x=date)) + 
  geom_line(aes(y = cor_ret35d_kurt126d_21d), color = 'red') + 
  geom_line(aes(y = cor_ret35d_kurt126d_126d), color = 'blue') + 
  scale_x_date(date_break = "2 months", date_labels = "%b %y")
```

Now we could see if there is any correlation between the kurtosis value and the 35d returns. 
```{r}
yo <- df |> filter(date > today() - 1260) |> 
  select(-date, -open, -high, -low, -volume, -adjusted, -ret_1d) |> 
  na.omit()

cor(yo$for_ret_35d, yo$kurt_21d)
cor(yo$for_ret_35d, yo$kurt_63d)
cor(yo$for_ret_35d, yo$kurt_126d)
cor(yo$for_ret_35d, yo$kurt_252d)

```


```{r}
etf_tickers <- c("XLF", "XLI", "XLY", "XLV", "XME", "XLB", "XBI", "IYT", "HACK", 
                 "VOX", "ITB", "FXG", 'VCR', 'XLC', 'IYW', 'VGT', 
                 "SMH", "IPAY", "SPY", "RSP", "QQQ", "XLE", "VDE", "XOP", 
                 "GDXJ", "VAW", 'PBW', "EEM", 'DIA', 'GDX', 
                 "KWEB", "HYG", "TLT", "DBB", "DBA", "IWD", "IWF")

stock_tickers <- c("AMD", "TSM", "BAH", "PYPL", "JPM", "AXP", 
                   "TFII", "FDX", "CAT", "HAL", "CVX", "PSX", 
                   "BBWI", "SBUX", "MNST", "DIS", "PARA", 
                   "GILD", "PKI", "CGC", 
                   "PAAS", "AA", "VALE", "STLD", "MOS", 
                   "ATKR", "RYN")

tickers <- c("ABNB", "GOOG", 'META', "AAPL", "NFLX", 
             'SQ', 'PYPL', 'TSLA', 'TWLO', 
             'AMZN', 'CGC', 'BMY', 'LLY', 'BA')

st <- c('EWQ', 'EWP', 'EWG', 'EPOL', 'EEM', 'EWZ', 'EWW', 'EWJ', 'EWY', 'EWS', 'EWM', 
        'THD', 'EIDO', 'EPHE', 'EWA', 'EZA', 'EWC')

df <- tibble(tickers = c(etf_tickers, stock_tickers, tickers, st)) |> 
  distinct() |> arrange(tickers) |> 
  mutate(prices = map(tickers, conform_data, .progress = T))
```

```{r}
yo = df |> 
  unnest(cols = c('prices'))
```

